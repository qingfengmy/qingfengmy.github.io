import{_ as a,c as s,o as n,a as e}from"./app.7f1206cf.js";const p="/assets/2022-05-ffmpeg.68011ec3.png",l="/assets/2022-05-ffmpeg-13.84d1bca7.png",m=JSON.parse('{"title":"2022-05-ffmpeg常用命令和常用案例","description":"","frontmatter":{},"headers":[],"relativePath":"2022/2022-05-ffmpeg常用命令和常用案例.md","lastUpdated":1676736987000}'),i={name:"2022/2022-05-ffmpeg常用命令和常用案例.md"},t=e(`<h1 id="_2022-05-ffmpeg常用命令和常用案例" tabindex="-1">2022-05-ffmpeg常用命令和常用案例 <a class="header-anchor" href="#_2022-05-ffmpeg常用命令和常用案例" aria-hidden="true">#</a></h1><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li><a href="http://www.ffmpeg.org/ffmpeg.html#Options" target="_blank" rel="noreferrer">ffmpeg官方文档</a></li><li><a href="http://www.ruanyifeng.com/blog/2020/01/ffmpeg.html" target="_blank" rel="noreferrer">ffmpeg-阮一峰</a></li><li><a href="https://www.jianshu.com/p/7a186943cbdd" target="_blank" rel="noreferrer">ffmpeg功能命令</a></li></ul><h2 id="基本知识" tabindex="-1">基本知识 <a class="header-anchor" href="#基本知识" aria-hidden="true">#</a></h2><h3 id="_1-容器" tabindex="-1">1. 容器 <a class="header-anchor" href="#_1-容器" aria-hidden="true">#</a></h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。 常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><ul><li>MP4</li><li>MKV</li><li>WebM</li><li>AVI</li></ul><p>下面的命令查看 FFmpeg 支持的容器。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -formats</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>MP4包含H.264和aac</p></blockquote><h3 id="_2-编码格式" tabindex="-1">2. 编码格式 <a class="header-anchor" href="#_2-编码格式" aria-hidden="true">#</a></h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><ul><li>H.262</li><li>H.264</li><li>H.265</li></ul><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><ul><li>VP8</li><li>VP9</li><li>AV1</li></ul><p>常用的音频编码格式如下。</p><ul><li>MP3</li><li>AAC</li></ul><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。 下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -codecs</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-编码器" tabindex="-1">3. 编码器 <a class="header-anchor" href="#_3-编码器" aria-hidden="true">#</a></h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><ul><li>libx264：最流行的开源 H.264 编码器</li><li>NVENC：基于 NVIDIA GPU 的 H.264 编码器</li><li>libx265：开源的 HEVC 编码器</li><li>libvpx：谷歌的 VP8 和 VP9 编码器</li><li>libaom：AV1 编码器</li></ul><p>音频编码器如下。</p><ul><li>libfdk-aac</li><li>aac</li></ul><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -encoders</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-ffmpeg-的使用格式" tabindex="-1">3. FFmpeg 的使用格式 <a class="header-anchor" href="#_3-ffmpeg-的使用格式" aria-hidden="true">#</a></h3><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg {1} {2} -i {3} {4} {5}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面命令中，五个部分的参数依次如下。</p><ol><li>全局参数</li><li>输入文件参数</li><li>输入文件</li><li>输出文件参数</li><li>输出文件</li></ol><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">[全局参数] \\</span></span>
<span class="line"><span style="color:#A6ACCD;">[输入文件参数] \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i [输入文件] \\</span></span>
<span class="line"><span style="color:#A6ACCD;">[输出文件参数] \\</span></span>
<span class="line"><span style="color:#A6ACCD;">[输出文件]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>下面是一个例子。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-y \\ # 全局参数</span></span>
<span class="line"><span style="color:#A6ACCD;">-c:a libfdk_aac -c:v libx264 \\ # 输入文件参数</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.mp4 \\ # 输入文件</span></span>
<span class="line"><span style="color:#A6ACCD;">-c:v libvpx-vp9 -c:a libvorbis \\ # 输出文件参数</span></span>
<span class="line"><span style="color:#A6ACCD;">output.webm # 输出文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i input.avi output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-hidden="true">#</a></h2><h3 id="_1-generic-options" tabindex="-1">1. <a href="http://www.ffmpeg.org/ffmpeg.html#toc-Generic-options" target="_blank" rel="noreferrer">Generic options</a> <a class="header-anchor" href="#_1-generic-options" aria-hidden="true">#</a></h3><ul><li>-L : Show license.</li><li>-h --help : 帮助</li><li>-version : 版本</li><li>-formats : 查询所有支持的视频容器</li><li>-codes : 查询所有支持的音视频编码格式</li><li>-encoders : 插座箱所有支持的编码器</li><li>...</li></ul><h3 id="_2-main-options" tabindex="-1">2. <a href="http://www.ffmpeg.org/ffmpeg.html#toc-Main-options" target="_blank" rel="noreferrer">Main options</a> <a class="header-anchor" href="#_2-main-options" aria-hidden="true">#</a></h3><ul><li>-f : fmt (<em>input/output</em>)</li><li>-i : url (<em>input</em>)</li><li>-t : duration (<em>input/output</em>)</li><li>-ss : 开始时间 (<em>input/output</em>)</li><li>-c : 指定编码器</li><li>-c:a : 指定音频编码器</li><li>-c:v : 指定视频编码器</li><li>-q:v : 质量，其值为1-5，1最高</li><li>-loop : 循环，值为1表示无限循环</li><li>...</li></ul><h3 id="_3-video-options" tabindex="-1">3. <a href="http://www.ffmpeg.org/ffmpeg.html#toc-Video-Options" target="_blank" rel="noreferrer">Video Options</a> <a class="header-anchor" href="#_3-video-options" aria-hidden="true">#</a></h3><ul><li>-minrate : 最小码率</li><li>-maxrate ：最大码率</li><li>-bufsize : 缓存大小</li><li>-vf : filtergraph (过滤器)</li><li>-vn : 去掉音频</li><li>-vframes : 截取帧数</li></ul><h3 id="_4-advanced-options" tabindex="-1">4. <a href="http://www.ffmpeg.org/ffmpeg.html#toc-Advanced-options" target="_blank" rel="noreferrer">Advanced options</a> <a class="header-anchor" href="#_4-advanced-options" aria-hidden="true">#</a></h3><ul><li>-shortest : 参数表示音频文件结束，输出视频就结束。</li></ul><h2 id="常用案例" tabindex="-1">常用案例 <a class="header-anchor" href="#常用案例" aria-hidden="true">#</a></h2><h3 id="_1-查看文件信息" tabindex="-1">1. 查看文件信息 <a class="header-anchor" href="#_1-查看文件信息" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i input.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面命令会输出很多冗余信息，加上-hide_banner参数，可以只显示元信息。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i input.mp4 -hide_banner</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_2-转换编码格式" tabindex="-1">2. 转换编码格式 <a class="header-anchor" href="#_2-转换编码格式" aria-hidden="true">#</a></h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器libx264，所以只需指定输出文件的视频编码器即可。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i [input.file] -c:v libx264 output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>下面是转成 H.265 编码的写法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i [input.file] -c:v libx265 output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-转换容器格式" tabindex="-1">3. 转换容器格式 <a class="header-anchor" href="#_3-转换容器格式" aria-hidden="true">#</a></h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -i input.mp4 -c copy output.webm</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>面例子中，只是转一下容器，内部的编码格式不变，所以使用-c copy指定直接拷贝，不经过转码，这样比较快。</p><h3 id="_4-调整码率" tabindex="-1">4. 调整码率 <a class="header-anchor" href="#_4-调整码率" aria-hidden="true">#</a></h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.mp4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-minrate 964K -maxrate 3856K -bufsize 2000K \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_5-改变分辨率-transsizing" tabindex="-1">5. 改变分辨率（transsizing） <a class="header-anchor" href="#_5-改变分辨率-transsizing" aria-hidden="true">#</a></h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.mp4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-vf scale=480:-1 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_6-提取音频" tabindex="-1">6. 提取音频 <a class="header-anchor" href="#_6-提取音频" aria-hidden="true">#</a></h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.mp4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-vn -c:a copy \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.aac</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面例子中，-vn表示去掉视频，-c:a copy表示不改变音频编码，直接拷贝。</p><h3 id="_7-添加音轨" tabindex="-1">7. 添加音轨 <a class="header-anchor" href="#_7-添加音轨" aria-hidden="true">#</a></h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.aac -i input.mp4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="_8-截图" tabindex="-1">8. 截图 <a class="header-anchor" href="#_8-截图" aria-hidden="true">#</a></h3><p>下面的例子是从指定时间开始，连续对1秒钟的视频进行截图。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-y \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input.mp4 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-ss 00:01:24 -t 00:00:01 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output_%3d.jpg</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果只需要截一张图，可以指定只截取一帧。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-ss 01:23:45 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i input \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-vframes 1 -q:v 2 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.jpg</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面例子中，-vframes 1指定只截取一帧，-q:v 2表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="_9-裁剪" tabindex="-1">9. 裁剪 <a class="header-anchor" href="#_9-裁剪" aria-hidden="true">#</a></h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]</span></span>
<span class="line"><span style="color:#A6ACCD;">$ ffmpeg -ss [start] -i [input] -to [end] -c copy [output]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>下面是实际的例子。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]</span></span>
<span class="line"><span style="color:#A6ACCD;">$ ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面例子中，-c copy表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="_10-为音频添加封面" tabindex="-1">10. 为音频添加封面 <a class="header-anchor" href="#_10-为音频添加封面" aria-hidden="true">#</a></h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。 下面命令可以将音频文件，转为带封面的视频文件。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ ffmpeg \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-loop 1 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-i cover.jpg -i input.mp3 \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-c:v libx264 -c:a aac -b:a 192k -shortest \\</span></span>
<span class="line"><span style="color:#A6ACCD;">output.mp4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面命令中，有两个输入文件，一个是封面图片cover.jpg，另一个是音频文件input.mp3。-loop 1参数表示图片无限循环，-shortest参数表示音频文件结束，输出视频就结束。</p><h3 id="_11-调整视频的大小和尺寸" tabindex="-1">11. 调整视频的大小和尺寸 <a class="header-anchor" href="#_11-调整视频的大小和尺寸" aria-hidden="true">#</a></h3><p>调整视频大小(resize)是改变视频的宽度和高度。使用-s参数实现，语法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ffmpeg  -i  input_file  -s  wxh  output_file (wxh是宽x高，比如320x240)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_12-视频裁剪" tabindex="-1">12. 视频裁剪 <a class="header-anchor" href="#_12-视频裁剪" aria-hidden="true">#</a></h3><p>视频裁剪使用crop视频滤镜，它可以把视频从指定的x、y位置裁剪成指定的w、h。坐标系是基于左上点开始的。 <img src="`+p+`" alt="图片.png"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ffmpeg -i input_file -vf crop=iw:ih:x:y output_file</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>比如有一个竖向的视频 1080 x 1920，如果指向保留中间 1080×1080 部分命令如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ffmpeg -i input_file -strict -2 -vf crop=1080:1080:0:420 output_file</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中的 crop=1080:1080:0:420 才裁剪参数，具体含义是 crop=width:height❌y，其中 width 和 height 表示裁剪后的尺寸，x:y 表示裁剪区域的左上角坐标。比如当前这个示例，我们只需要保留竖向视频的中间部分，所以 x 不用偏移，故传入0，而 y 则需要向下偏移：(1920 – 1080) / 2 = 420</p><blockquote><p>超出原视频的尺寸会报错，可能无法实现多余部分用黑色补齐的需求</p></blockquote><h3 id="_13-加黑边" tabindex="-1">13. 加黑边 <a class="header-anchor" href="#_13-加黑边" aria-hidden="true">#</a></h3><p>使用FFmpeg给视频增加黑边需要用到 pad 这个滤镜，具体用法如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">-vf pad=1280:720:0:93:black</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>按照从左到右的顺序依次为:“宽”、“高”、“X坐标”和“Y坐标”，宽和高指的是输入视频尺寸（包含加黑边的尺寸），XY指的是视频所在位置。</p><p>比如一个输入视频尺寸是1280x534的源，想要加上黑边变成1280x720，那么用上边的语法可以实现，93是这样得来的，（720-534）/2。</p><p><img src="`+l+'" alt="图片.png"> 如果视频原始1920x800的话，完整的语法应该是：-vf &#39;scale=1280:534,pad=1280:720:0:93:black&#39;先将视频缩小到1280x534，然后在加入黑边变成1280x720，将1280x534的视频放置在x=0，y=93的地方，FFmpeg会自动在上下增加93像素的黑边。</p><blockquote><p>注：black可以不写，默认是黑色</p></blockquote>',110),o=[t];function c(r,d,h,C,u,g){return n(),s("div",null,o)}const f=a(i,[["render",c]]);export{m as __pageData,f as default};
