import{_ as a,c as e,o as t,a as s}from"./app.7f1206cf.js";const o="/assets/2022-12-视频播放.371a720c.gif",n="/assets/2022-12-mediainfo设置.4b2df95a.png",g=JSON.parse('{"title":"2022-12-优化MP4播放器","description":"","frontmatter":{},"headers":[],"relativePath":"2022/2022-12-优化MP4播放器.md","lastUpdated":1676736399000}'),p={name:"2022/2022-12-优化MP4播放器.md"},r=s('<h1 id="_2022-12-优化mp4播放器" tabindex="-1">2022-12-优化MP4播放器 <a class="header-anchor" href="#_2022-12-优化mp4播放器" aria-hidden="true">#</a></h1><h2 id="_1-需求场景" tabindex="-1">1. 需求场景 <a class="header-anchor" href="#_1-需求场景" aria-hidden="true">#</a></h2><p>有时候我们需要播放一个视频，而这个视频是后端生成的mp4视频，还很大，放到前端去播放，有时候会转很久才会出来。 我们需要优化。</p><h2 id="_2-优化思路" tabindex="-1">2. 优化思路 <a class="header-anchor" href="#_2-优化思路" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt="视频播放.gif"> 首先看这个视频的http请求，发现有206的响应码，而且随着视频的播放，最后一个http会一直进行。而视频播放之前的黑屏时间是前两次206的请求响应时间，将近1秒钟。 要解决这个问题，我们要知道MP4的视频和音频信息存在哪里</p><blockquote><p>MP4 文件由叫做 <a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.adobe.com%2Fdevnet%2Fvideo%2Farticles%2Fmp4_movie_atom.html" target="_blank" rel="noreferrer">原子</a> 的数据块组成。这些原子用以存储字幕和章节等内容， 当然也包括视频和音频等显而易见的数据。而视频和音频原子的元数据，以及有关如何播放视频的信息，如尺寸和每秒的帧数，则存储在叫做 moov 的特殊原子中。你可以认为 moov 原子是某种意义上的 MP4 文件<strong>目录</strong>。</p></blockquote><blockquote><p>作者：小小木锤 链接：<a href="https://juejin.cn/post/6844903656798568461" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903656798568461</a> 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>所以当播放视频的时候，程序会查找MP4文件，定位moov原子的位置。实际上，moov原子的位置是不确定的，如果它不在开始位置，我们可能需要下载完整个视频才能播放。 优化思路就是把moov原子放到最前面。</p><h2 id="_3-优化方案" tabindex="-1">3. 优化方案 <a class="header-anchor" href="#_3-优化方案" aria-hidden="true">#</a></h2><h3 id="_3-1-工具" tabindex="-1">3.1 工具 <a class="header-anchor" href="#_3-1-工具" aria-hidden="true">#</a></h3><p><img src="'+n+`" alt="图片.png"> 我们可以生成MP4的工具上勾选web optimized</p><h3 id="_3-2-ffmpeg" tabindex="-1">3.2 ffmpeg <a class="header-anchor" href="#_3-2-ffmpeg" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ffmpeg </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">i input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mp4 </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">movflags faststart </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">acodec copy </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">vcodec copy output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mp4</span></span>
<span class="line"></span></code></pre></div><p><code>-movflags faststart </code>参数告诉 ffmpeg 把 MP4 视频的原子们重新排序以使得 moov 位于开始位置。我们同样指示 ffmpeg 拷贝视频和音频数据而不是重新编码，所以没有任何改变。</p><h2 id="_4-206状态码" tabindex="-1">4. 206状态码 <a class="header-anchor" href="#_4-206状态码" aria-hidden="true">#</a></h2><p>HTTP<code>206</code>状态码代表的意思是 请求已成功处理，但仅返回了部分内容，即 HTTP 206 <code>Partial Content</code> 响应状态。 <code>HTTP 206 (Http Status Code 206) 状态</code>是HTTP协议的一种响应码，是我们请求访问网站时，服务器端返回的2xx 成功状态系列响应码之一。 状态详细说明：HTTP 206 表示服务器已经成功处理了部分GET请求。类似于迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含Range头信息来指示客户端希望得到的内容范围，并且可能包含If-Range来作为请求条件。</p><blockquote><p>如果服务器不支持http range，则没有206状态码，那么就不能做moov优化</p></blockquote>`,17),c=[r];function l(d,i,h,_,m,f){return t(),e("div",null,c)}const b=a(p,[["render",l]]);export{g as __pageData,b as default};
